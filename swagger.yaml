openapi: 3.0.0
info:
  title: Nutech Integrasi API
  description: API untuk layanan registrasi, login, top up, dan transaksi
  version: 1.0.0
servers:
  - url: https://nutechintegrasiapinodejs-production.up.railway.app/api

tags:
  - name: Membership
    description: Modul untuk registrasi dan login
  - name: Information
    description: Modul untuk mendapatkan informasi layanan
  - name: Transaction
    description: Modul untuk transaksi saldo dan pembayaran

paths:
  /registration:
    post:
      tags: [Membership]
      summary: Registrasi pengguna baru
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - first_name
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Email sudah terdaftar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags: [Membership]
      summary: Login pengguna
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Email atau password salah
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /services:
    get:
      tags: [Information]
      summary: Get available services
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /banner:
    get:
      tags: [Information]
      summary: Get banner list
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /balance:
    get:
      tags: [Transaction]
      summary: Get user balance
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /topup:
    post:
      tags: [Transaction]
      summary: Top up balance
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  minimum: 1
                  example: 100000
                  description: Amount to top up (must be positive)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '400':
          description: Invalid amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidAmountError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transaction:
    post:
      tags: [Transaction]
      summary: Make a payment transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service_code
              properties:
                service_code:
                  type: string
                  example: "PULSA"
                  description: Code of the service to pay for
      responses:
        '200':
          description: Transaction successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InsufficientBalanceError'
                  - $ref: '#/components/schemas/ServiceNotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transaction/history:
    get:
      tags: [Transaction]
      summary: Get transaction history with pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Offset for pagination (starting index)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve
      responses:
        '200':
          description: Transaction history fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistoryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized (invalid or missing token)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'

  schemas:
    BaseResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
          description: Status code (0 for success)
        message:
          type: string
          example: Success
          description: Response message
        data:
          type: object
          description: Response data

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  description: JWT token for authentication

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 102
          description: Error code
        message:
          type: string
          example: Email already registered
          description: Error message
        data:
          type: null

    BalanceResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: "Get balance success"
        data:
          type: object
          properties:
            balance:
              type: number
              example: 100000

    BannerResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: "Get banner success"
        data:
          type: array
          items:
            type: object
            properties:
              banner_name:
                type: string
                example: "Promo Cashback"
              banner_image:
                type: string
                format: uri
                example: "https://example.com/banners/promo-cashback.jpg"
              description:
                type: string
                example: "Dapatkan cashback 10% untuk transaksi pertama"

    TransactionResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: "Transaction success"
        data:
          type: object
          properties:
            invoice_number:
              type: string
              description: Transaction invoice number
            service_code:
              type: string
              description: Service code that was paid for
            service_name:
              type: string
              description: Service name that was paid for
            transaction_type:
              type: string
              enum: [PAYMENT]
              description: Type of transaction
            total_amount:
              type: number
              description: Amount deducted
            balance:
              type: number
              description: Remaining balance after transaction

    TransactionHistoryResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: "Get transaction history success"
        data:
          type: array
          items:
            type: object
            properties:
              invoice_number:
                type: string
                example: "INV12345678"
              service_code:
                type: string
                example: "PULSA"
              service_name:
                type: string
                example: "Pulsa"
              transaction_type:
                type: string
                enum: [PAYMENT, TOPUP]
                example: "PAYMENT"
              total_amount:
                type: number
                example: 50000
              created_on:
                type: string
                format: date-time
                example: "2025-06-18T10:15:30Z"

    ServicesResponse:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: "Get services success"
        data:
          type: array
          items:
            type: object
            properties:
              service_code:
                type: string
                description: Unique service code
              service_name:
                type: string
                description: Service display name
              service_icon:
                type: string
                format: uri
                description: URL to service icon
              service_tariff:
                type: number
                description: Service price/tariff

    InsufficientBalanceError:
      type: object
      properties:
        status:
          type: integer
          example: 105
          description: Error code for insufficient balance
        message:
          type: string
          example: "Insufficient balance"
          description: Error message
        data:
          type: null

    ServiceNotFoundError:
      type: object
      properties:
        status:
          type: integer
          example: 104
          description: Error code for service not found
        message:
          type: string
          example: "Service not found"
          description: Error message
        data:
          type: null

    UnauthorizedError:
      type: object
      properties:
        status:
          type: integer
          example: 108
          description: Error code for unauthorized access
        message:
          type: string
          example: "Invalid token"
          description: Error message
        data:
          type: null

    InvalidAmountError:
      type: object
      properties:
        status:
          type: integer
          example: 102
          description: Error code for invalid amount
        message:
          type: string
          example: "Invalid amount"
          description: Error message
        data:
          type: null